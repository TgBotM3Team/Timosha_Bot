from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.utils import executor
from config import bot, dp
from media.images import *
from media.texts import *

async def on_startup(_):
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    btn = KeyboardButton('–ú–∞–Ω—É–ª... –∑–≤—É—á–∏—Ç –∑–Ω–∞–∫–æ–º–æ...')
    start_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn)

    # —Å–æ–æ–±—â–µ–Ω–∏—è –¢–∏–º–æ—Ñ–µ—è
    await bot.send_photo(message.chat.id, text=hello_text)
    await message.answer(hello_text, parse_mode="HTML", reply_markup=start_menu)
    await message.delete()

@dp.message_handler()
async def reply_handler(message: types.Message):
    try:
        match message.text:
            case '–ú–∞–Ω—É–ª... –∑–≤—É—á–∏—Ç –∑–Ω–∞–∫–æ–º–æ...':
                # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                btn1 = KeyboardButton('–î–ê ü¶•')
                btn2 = KeyboardButton('–ê —è –Ω–µ —Ö–æ—á—É ‚òπÔ∏è')
                START_QUIZ = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(btn1).add(btn2)

                # —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¢–∏–º–æ—Ñ–µ—è
                await bot.send_video(message.chat.id, video=manul_paws)
                await message.answer(manul_text)
                await message.answer(quiz_text, reply_markup=START_QUIZ)

            case '–î–ê ü¶•':
                await message.answer('–Ø –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏üò¢')

            case '–ê —è –Ω–µ —Ö–æ—á—É ‚òπÔ∏è':
                # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                btn3 = KeyboardButton('–õ–∞–¥–Ω–æ, –¥–∞–≤–∞–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éüòä')
                OKAY_START = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(btn3)

                # —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¢–∏–º–æ—Ñ–µ—è
                await bot.send_photo(message.chat.id, angry_timosha)
                await message.answer(angry_text, reply_markup=OKAY_START)

            case '–õ–∞–¥–Ω–æ, –¥–∞–≤–∞–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éüòä':
                await message.answer('–Ø –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏üò¢')
    except Exception as e:
        await message.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ')
        print(f'[INFO] {e}')

# –ü–æ–ª—É—á–∏—Ç—å id –∫–∞—Ä—Ç–∏–Ω–∫–∏
@dp.message_handler(content_types=['photo'])
async def scan_message(msg: types.Message):
    document_id = msg.photo[0].file_id
    file_info = await bot.get_file(document_id)
    print(f'file_id: {file_info.file_id}')
    print(f'file_path: {file_info.file_path}')
    print(f'file_size: {file_info.file_size}')
    print(f'file_unique_id: {file_info.file_unique_id}')
    await bot.send_message(msg.chat.id, text=f"file_id: {file_info.file_id}\n"
                                             f"file_path: {file_info.file_path}\n"
                                             f"file_size: {file_info.file_size}\n"
                                             f"file_unique_id: {file_info.file_unique_id}\n")

# –ü–æ–ª—É—á–∏—Ç—å id –≤–∏–¥–µ–æ
@dp.message_handler(content_types=['video'])
async def get_video_id(message: types.Message):
    video_id = message.video.file_id
    file_info = await bot.get_file(video_id)
    print(f'file_id: {file_info.file_id}')
    await bot.send_message(message.chat.id, text=f"file_id: {file_info.file_id}")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
